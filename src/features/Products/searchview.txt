# Product Search View for Your E-Commerce App

Based on your schema, I'll create a comprehensive PostgreSQL view for product search with filters. This view will combine data from multiple tables to enable powerful product filtering.

## Product Search View Implementation

```sql
CREATE OR REPLACE VIEW product_search_view AS
SELECT
  p.id AS product_id,
  p.name AS product_name,
  p.description,
  p.price,
  p.is_new,
  p.care_instruction,
  
  -- Category information
  c.id AS category_id,
  c.name AS category_name,
  c.slug AS category_slug,
  c.image AS category_image,
  parent_c.name AS parent_category_name,
  parent_c.slug AS parent_category_slug,
  
  -- Brand information
  b.id AS brand_id,
  b.name AS brand_name,
  
  -- Variant information
  pv.id AS variant_id,
  pv.sku,
  pv.name AS variant_name,
  col.id AS color_id,
  col.name AS color_name,
  col.hex_code AS color_hex,
  
  -- Size/unit information
  pu.id AS product_unit_id,
  s.id AS size_id,
  s.name AS size_name,
  pu.stock_quantity,
  
  -- Images (aggregated as JSON array)
  (
    SELECT json_agg(json_build_object(
      'id', pvi.id,
      'url', pvi.image_url
    ))
    FROM product_variant_images pvi
    WHERE pvi.variant_id = pv.id
  ) AS images,
  
  -- Average rating
  (
    SELECT ROUND(AVG(r.rating), 1)
    FROM reviews r
    WHERE r.product_variant_id = pv.id
  ) AS average_rating,
  
  -- Review count
  (
    SELECT COUNT(*)
    FROM reviews r
    WHERE r.product_variant_id = pv.id
  ) AS review_count
  
FROM products p
JOIN categories c ON p.category_id = c.id
LEFT JOIN categories parent_c ON c.parent_id = parent_c.id
LEFT JOIN brands b ON p.brand_id = b.id
JOIN product_variants pv ON pv.product_id = p.id
JOIN colors col ON pv.color_id = col.id
JOIN product_units pu ON pu.variant_id = pv.id
JOIN sizes s ON pu.size_id = s.id;
```

## Optimized Indexes for Search Performance

```sql
-- Products table indexes
CREATE INDEX idx_products_category ON products(category_id);
CREATE INDEX idx_products_brand ON products(brand_id);
CREATE INDEX idx_products_price ON products(price);
CREATE INDEX idx_products_name ON products(name);

-- Variants and units indexes
CREATE INDEX idx_product_variants_product ON product_variants(product_id);
CREATE INDEX idx_product_units_variant ON product_units(variant_id);
CREATE INDEX idx_product_units_stock ON product_units(stock_quantity);

-- Full-text search index (for name/description search)
CREATE INDEX idx_products_search ON products USING gin(to_tsvector('english', name || ' ' || description));
```

## Example Search Queries

### 1. Basic Filtering (Price, Category, Brand)
```sql
SELECT * FROM product_search_view
WHERE 
  price BETWEEN 10 AND 100
  AND category_id = 'your-category-uuid'
  AND brand_id = 'your-brand-uuid'
  AND stock_quantity > 0;
```

### 2. Text Search (Name/Description)
```sql
SELECT * FROM product_search_view
WHERE 
  to_tsvector('english', product_name || ' ' || description) @@ to_tsquery('english', 'cotton & shirt')
  AND stock_quantity > 0;
```

### 3. Filter by Color and Size
```sql
SELECT * FROM product_search_view
WHERE 
  color_id = 'your-color-uuid'
  AND size_id = 'your-size-uuid'
  AND stock_quantity > 0;
```

### 4. New Arrivals with Rating Filter
```sql
SELECT * FROM product_search_view
WHERE 
  is_new = TRUE
  AND average_rating >= 4
  AND stock_quantity > 0
ORDER BY average_rating DESC;
```

## Materialized View Option

For better performance with frequent searches:

```sql
CREATE MATERIALIZED VIEW product_search_materialized AS
SELECT * FROM product_search_view;

-- Refresh periodically (e.g., daily or hourly)
REFRESH MATERIALIZED VIEW product_search_materialized;

-- Create indexes on materialized view
CREATE INDEX idx_mv_product_name ON product_search_materialized(product_name);
CREATE INDEX idx_mv_price ON product_search_materialized(price);
CREATE INDEX idx_mv_category ON product_search_materialized(category_id);
```

## API Integration Example (Node.js)

```javascript
async function searchProducts(filters) {
  let query = 'SELECT * FROM product_search_view WHERE stock_quantity > 0';
  const params = [];
  let paramIndex = 1;
  
  if (filters.category) {
    query += ` AND category_id = $${paramIndex++}`;
    params.push(filters.category);
  }
  
  if (filters.minPrice && filters.maxPrice) {
    query += ` AND price BETWEEN $${paramIndex++} AND $${paramIndex++}`;
    params.push(filters.minPrice, filters.maxPrice);
  }
  
  if (filters.searchText) {
    query += ` AND to_tsvector('english', product_name || ' ' || description) @@ to_tsquery('english', $${paramIndex++})`;
    params.push(filters.searchText);
  }
  
  // Add sorting
  query += ' ORDER BY ';
  if (filters.sortBy === 'price') {
    query += 'price';
  } else if (filters.sortBy === 'rating') {
    query += 'average_rating DESC NULLS LAST';
  } else {
    query += 'product_name';
  }
  
  const { rows } = await pool.query(query, params);
  return rows;
}
```

This implementation provides a comprehensive search solution for your e-commerce app, with support for:
- Text search (product names and descriptions)
- Price range filtering
- Category/brand filtering
- Color/size filtering
- Stock availability
- Sorting by price, rating, etc.
- Efficient performance through proper indexing

Would you like me to modify any part of this implementation to better match your specific requirements?